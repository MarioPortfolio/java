/*
*  Dado um vetor que guarda o valor de faturamento diário de uma distribuidora, faça um programa, na linguagem que desejar,
*  que calcule e retorne:
• O menor valor de faturamento ocorrido em um dia do mês;
• O maior valor de faturamento ocorrido em um dia do mês;
• Número de dias no mês em que o valor de faturamento diário foi superior à média mensal.

IMPORTANTE:
a) Usar o json ou xml disponível como fonte dos dados do faturamento mensal;
b) Podem existir dias sem faturamento, como nos finais de semana e feriados. Estes dias devem ser ignorados no cálculo da média;
 */



import java.io.File;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.Month;
import java.time.format.DateTimeFormatter;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.*;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

public class FaturamentoMensal {

    public static void main(String[] args) throws Exception {
        // Ler o arquivo XML com os dados de faturamento diário
        File dados = new File("faturamento.xml");
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        Document doc = dbFactory.newDocumentBuilder().parse(xmlFile);

        // Extrair os valores de faturamento de cada dia do mês e armazená-los em um vetor
        NodeList nodeList = doc.getElementsByTagName("dia");
        double[] faturamentos = new double[nodeList.getLength()];
        for (int i = 0; i < nodeList.getLength(); i++) {
            Element element = (Element) nodeList.item(i);
            faturamentos[i] = Double.parseDouble(element.getTextContent());
        }

        // Calcular o menor e o maior valor de faturamento ocorrido em um dia do mês
        double menorFaturamento = faturamentos[0];
        double maiorFaturamento = faturamentos[0];
        for (double faturamento : faturamentos) {
            if (faturamento < menorFaturamento) {
                menorFaturamento = faturamento;
            }
            if (faturamento > maiorFaturamento) {
                maiorFaturamento = faturamento;
            }
        }

        // Calcular a média mensal de faturamento, ignorando os dias sem faturamento
        double somaFaturamentos = 0;
        int numDiasComFaturamento = 0;
        for (double faturamento : faturamentos) {
            if (faturamento > 0) {
                somaFaturamentos += faturamento;
                numDiasComFaturamento++;
            }
        }
        double mediaMensal = somaFaturamentos / numDiasComFaturamento;

        // Contar o número de dias em que o valor de faturamento diário foi superior à média mensal
        int numDiasAcimaDaMedia = 0;
        for (double faturamento : faturamentos) {
            if (faturamento > mediaMensal) {
                numDiasAcimaDaMedia++;
            }
        }

        // Exibir os resultados
        DecimalFormat df = new DecimalFormat("#.00");
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMMM yyyy");
        LocalDate data = LocalDate.of(2023, Month.FEBRUARY, 1);
        String mesAno = data.format(formatter);
        System.out.println("Resultados do faturamento mensal de " + mesAno + ":");
        System.out.println("- Menor faturamento: R$ " + df.format(menorFaturamento));
        System.out.println("- Maior faturamento: R$ " + df.format(maiorFaturamento));
        System.out.println("- Média mensal de faturamento: